set -e
# Import the global variables used throughout this script and others.
source $HOME/repos/dotfiles/user_configs/sh/.bashrc # This should run out-the-box even on a clean install. The 'dotfiles' repo is installed already by the arch-ISO installation script.

###################################
########## Init scripts ###########
###################################
# Run any platform-specific initialization scripts.
if [ -e "$DF_PLATFORM_INIT_SCRIPT" ]; then
  echo "Running init script for $DISTRO: $DF_PLATFORM_INIT_SCRIPT"
  source "$DF_PLATFORM_INIT_SCRIPT"
else
  echo "No init script found for $DISTRO: $DF_PLATFORM_INIT_SCRIPT"
  exit 0
fi

# Run any device-specific initialization scripts, identified by the hostname.
if [ -e "$DF_DEVICE_INIT_SCRIPT" ]; then
  echo "Running init script for $HOSTNAME: $DF_DEVICE_INIT_SCRIPT"
  source "$DF_DEVICE_INIT_SCRIPT"
else
  echo "No init script found for $HOSTNAME: $DF_DEVICE_INIT_SCRIPT"
fi

echo "Successfully ran init script."
###################################
########## User Configs ###########
###################################
# Stop the stow failing if files already exist there!
if [ -e "$HOME/.bashrc" ] && [ ! -L "$HOME/.bashrc" ]; then
  echo "A .bashrc file exists in the home repo that NOT a symlink to my own .bashrc. Deleting it."
  rm $HOME/.bashrc
fi

if [ -e "$HOME/.zshrc" ] && [ ! -L "$HOME/.zshrc" ]; then
  echo "A .zshrc file exists in the home repo that NOT a symlink to my own .zshrc. Deleting it."
  rm $HOME/.zshrc
fi

if [ -e "$HOME/.zprofile" ] && [ ! -L "$HOME/.zprofile" ]; then
  echo "A .zprofile file exists in the home repo that NOT a symlink to my own .zprofile. Deleting it."
  rm $HOME/.zprofile
fi

# TODO: In order to get the intended functionality of treating each of the subfolders of the stow dir as a module, and reacreate each of their substructures within the target dirs, rather than just dumping them in the target dir directly, the cd approach was working best. For better readability, look into whether it could work with specifying the dir, it wasn't last time I tried.

# TODO: Symlink the .env.sh file to my home dir for better traceability.
working_dir=$(pwd)

echo "Setting up Yonah's user configs."
cd $DOTFILES/user_configs
stow --target $HOME */ # User configs.

# Global configs.
echo "Setting up Yonah's global configs."
cd $DOTFILES/global_configs
# Stowing as root should give root ownership of the symlinks.
# The files they link to should be user-owned, to not interfere with git.
sudo stow --target /etc */

# Executable cmdlets.
cd $DOTFILES/tooling
mkdir -p $HOME/bin
mkdir -p $HOME/tools
stow --target $HOME/bin bin
stow --target $HOME/tools tools
sudo chmod +x $HOME/bin/*

# In order to make tmux-resurrect work across both mac and linux, I need to manually set the 'last' symlink in the script, as there is a different file for each os. These files do not support manual expansion logic, so this pointer is the only way to do it, outside the repo.
tmux_resurrect_folder="$DOTFILES/user_configs/tmux/.local/share/tmux/resurrect"
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  tmux_resurrect_filename="tmux_resurrect_linux.txt"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  tmux_resurrect_filename="tmux_resurrect_mac_os.txt"
fi
# The 'last' symlink is the pointer that tmux resurrect uses to work out which file to load from
ln -sf "$tmux_resurrect_folder/$tmux_resurrect_filename" "$tmux_resurrect_folder/last"

# Reset the pwd
cd $working_dir

#########################################
########## Install global npm ###########
#########################################
echo "Instaling global npm apps"
cat $DF_NPM_PACKAGES | xargs sudo npm install -g
echo "Completed installation of npm apps"

#########################################
########## Post-setup scripts ###########
#########################################

# Run universal postscript
echo "Running universal postscript for all platforms..."
source "$DF_COMMON_POSTSCRIPT"


# Run any platform-specific setup postscripts.
if [ -e "$DF_PLATFORM_POSTSCRIPT" ]; then
  echo "Running postscript for $DISTRO: $DF_PLATFORM_POSTSCRIPT"
  source "$DF_PLATFORM_POSTSCRIPT"
else
  echo "No postscript found for $DISTRO: $DF_PLATFORM_POSTSCRIPT"
fi

# Run any device-specific postscripts, identified by the hostname.
if [ -e "$DF_DEVICE_POSTSCRIPT" ]; then
  echo "Running postscript for $HOSTNAME: $DF_DEVICE_POSTSCRIPT"
  source "$DF_DEVICE_POSTSCRIPT"
else
  echo "No postscript found for $HOSTNAME: $DF_DEVICE_POSTSCRIPT"
fi

# Finally, when updating system (and therefore already using zsh),
# rerun .zsh setup scripts to ensure any changes apply.
# Check if the ZSH_VERSION variable is set and not empty.
# This is the most reliable way to know if you're in zsh.
if [[ -n "$ZSH_VERSION" ]]; then
  echo "[INFO] Already running in zsh, sourcing zsh setup scripts to refresh environment."
  source "$DF_BASE_ZPROFILE" # It's good practice to quote variables
  source "$DF_BASE_ZSHRC"
else # If not in zsh, launch it.
  # You might want to add a check here to ensure zsh is actually installed
  if command -v zsh &>/dev/null; then
    zsh
  else
    echo "[ERROR] zsh is not installed."
  fi
fi
